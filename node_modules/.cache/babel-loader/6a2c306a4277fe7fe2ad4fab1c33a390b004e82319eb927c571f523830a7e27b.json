{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const getPosts = createAsyncThunk('post/getPosts', async () => {\n  return fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json());\n});\nconst initialState = {\n  post: [],\n  loading: false\n};\nconst postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    });\n  }\n  //   extraReducers: {\n  //     [getPosts.pending as any]: (state: { loading: boolean }, action: any) => {\n  //       state.loading = true\n  //     },\n  //     [getPosts.fulfilled as any]: (state: { loading: boolean; posts: any }, action: { payload: Record<string, unknown> }) => {\n  //       state.loading = false\n  //       state.posts = action.payload\n  //     },\n  //     [getPosts.rejected as any]: (state: { loading: boolean }, action: any) => {\n  //       state.loading = false\n  //     }\n  //   }\n});\n\nexport default postSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getPosts","fetch","then","res","json","initialState","post","loading","postSlice","name","extraReducers","builder","addCase","fetchPosts","pending","state","action","status","reducer"],"sources":["/Users/mac/Desktop/divine_books/src/redux/slices/postSllice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nexport const getPosts = createAsyncThunk('post/getPosts', async () => {\n  return fetch('https://jsonplaceholder.typicode.com/posts').then((res) => res.json())\n})\n\ninterface PostState {\n  post: unknown[]\n  loading: boolean\n}\n\nconst initialState: PostState = {\n  post: [],\n  loading: false\n}\n\nconst postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading'\n    })\n  }\n  //   extraReducers: {\n  //     [getPosts.pending as any]: (state: { loading: boolean }, action: any) => {\n  //       state.loading = true\n  //     },\n  //     [getPosts.fulfilled as any]: (state: { loading: boolean; posts: any }, action: { payload: Record<string, unknown> }) => {\n  //       state.loading = false\n  //       state.posts = action.payload\n  //     },\n  //     [getPosts.rejected as any]: (state: { loading: boolean }, action: any) => {\n  //       state.loading = false\n  //     }\n  //   }\n})\n\nexport default postSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,QAAQ,GAAGD,gBAAgB,CAAC,eAAe,EAAE,YAAY;EACpE,OAAOE,KAAK,CAAC,4CAA4C,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC;AACtF,CAAC,CAAC;AAOF,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,SAAS,GAAGV,WAAW,CAAC;EAC5BW,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,aAAa,CAACC,OAAO,EAAE;IACrBA,OAAO,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACE,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAeT,SAAS,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}