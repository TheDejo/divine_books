{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport constant from '@/config/constants';\nconst {\n  API: {\n    routes\n  }\n} = constant;\n\n// interface FetchBooksArgs {\n//   argument: string\n// }\n\n// interface FetchBooksResult {\n//   // the shape of the data returned by the API\n// }\n\nexport const fetchBooks = createAsyncThunk('books/getBooks', async (a, thunkAPI) => {\n  return await fetch(`http://openlibrary.org/search.json?title=${a}`);\n});\n\n// export const fetchBooks = createAsyncThunk('books/getBooks', async (a) => {\n//   console.log('tdfgjhkjlk', a)\n//   return await fetch('http://openlibrary.org/search.json?title=drac').then((res) => res.json())\n// })\n\nconst initialState = {\n  books: {},\n  loading: false\n};\nconst bookSlice = createSlice({\n  name: 'books',\n  initialState,\n  extraReducers(builder) {\n    builder.addCase(fetchBooks.pending, state => {\n      state.loading = true;\n    }).addCase(fetchBooks.fulfilled, (state, action) => {\n      state.loading = true;\n      state.books = action.payload;\n    }).addCase(fetchBooks.rejected, state => {\n      state.loading = false;\n    });\n  },\n  reducers: {}\n});\nexport default bookSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","constant","API","routes","fetchBooks","a","thunkAPI","fetch","initialState","books","loading","bookSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducers","reducer"],"sources":["/Users/mac/Desktop/divine_books/src/redux/slices/bookSlice.ts"],"sourcesContent":["import buuks from '@/config/services/buuks'\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport constant from '@/config/constants'\n\nconst {\n  API: { routes }\n} = constant\n\n// interface FetchBooksArgs {\n//   argument: string\n// }\n\n// interface FetchBooksResult {\n//   // the shape of the data returned by the API\n// }\n\nexport const fetchBooks = createAsyncThunk<any, any, any>('books/getBooks', async (a, thunkAPI) => {\n  return await fetch(`http://openlibrary.org/search.json?title=${a}`)\n})\n\n// export const fetchBooks = createAsyncThunk('books/getBooks', async (a) => {\n//   console.log('tdfgjhkjlk', a)\n//   return await fetch('http://openlibrary.org/search.json?title=drac').then((res) => res.json())\n// })\n\ninterface BookState {\n  books: Record<string, unknown>\n  loading: boolean\n}\n\nconst initialState: BookState = {\n  books: {},\n  loading: false\n}\n\nconst bookSlice = createSlice({\n  name: 'books',\n  initialState,\n  extraReducers(builder) {\n    builder\n      .addCase(fetchBooks.pending, (state) => {\n        state.loading = true\n      })\n      .addCase(fetchBooks.fulfilled, (state, action) => {\n        state.loading = true\n        state.books = action.payload\n      })\n      .addCase(fetchBooks.rejected, (state) => {\n        state.loading = false\n      })\n  },\n  reducers: {}\n})\n\nexport default bookSlice.reducer\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,QAAQ,MAAM,oBAAoB;AAEzC,MAAM;EACJC,GAAG,EAAE;IAAEC;EAAO;AAChB,CAAC,GAAGF,QAAQ;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMG,UAAU,GAAGJ,gBAAgB,CAAgB,gBAAgB,EAAE,OAAOK,CAAC,EAAEC,QAAQ,KAAK;EACjG,OAAO,MAAMC,KAAK,CAAE,4CAA2CF,CAAE,EAAC,CAAC;AACrE,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAOA,MAAMG,YAAuB,GAAG;EAC9BC,KAAK,EAAE,CAAC,CAAC;EACTC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,SAAS,GAAGZ,WAAW,CAAC;EAC5Ba,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,aAAa,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAACX,UAAU,CAACY,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDK,OAAO,CAACX,UAAU,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACX,UAAU,CAACiB,QAAQ,EAAGJ,KAAK,IAAK;MACvCA,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;EACN,CAAC;EACDY,QAAQ,EAAE,CAAC;AACb,CAAC,CAAC;AAEF,eAAeX,SAAS,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}